version: '3.8'

services:
  # Embedding Service (Python FastAPI)
  embedding-service:
    build: 
      context: ./services/embedding_service
      dockerfile: Dockerfile
    container_name: rag-embedding-service
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - JINA_API_KEY=${JINA_API_KEY}
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-rag_system}
      - MONGODB_COLLECTION=${MONGODB_COLLECTION:-embeddings}
      - EMBEDDING_SERVICE_PORT=8000
    networks:
      - rag-network
    volumes:
      - ./services/embedding_service:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Orchestrator Service (Node.js Express)
  orchestrator:
    build:
      context: ./services/orchestrator
      dockerfile: Dockerfile
    container_name: rag-orchestrator
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - ORCHESTRATOR_PORT=5000
      - EMBEDDING_SERVICE_URL=http://embedding-service:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL=${LLM_MODEL:-gpt-3.5-turbo}
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.7}
      - MAX_TOKENS=${MAX_TOKENS:-500}
    depends_on:
      - embedding-service
    networks:
      - rag-network
    volumes:
      - ./services/orchestrator/logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  rag-network:
    driver: bridge
